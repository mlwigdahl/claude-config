# Security-hardened Dockerfile
# Generated by containerization-workflow
# Multi-stage build for Node.js web application
FROM node:18-alpine AS builder
# Security scanning metadata
LABEL security.scan-date="$(date -u +'%Y-%m-%dT%H:%M:%SZ')"
LABEL security.non-root-user="true"
LABEL security.minimal-base="true"
# Set working directory
WORKDIR /app
# Copy package files for monorepo
COPY package*.json ./
COPY packages/shared/package*.json ./packages/shared/
COPY packages/core/package*.json ./packages/core/
COPY packages/server/package*.json ./packages/server/
COPY packages/app/package*.json ./packages/app/
# Install ALL dependencies (including devDependencies for build)
RUN npm ci && \
    npm cache clean --force
# Copy application code
COPY . .
# Build application if needed
RUN npm run build
# Production stage
FROM node:18-alpine
# Set working directory
WORKDIR /app
# Copy package files for production dependencies
COPY package*.json ./
COPY packages/shared/package*.json ./packages/shared/
COPY packages/core/package*.json ./packages/core/
COPY packages/server/package*.json ./packages/server/
COPY packages/app/package*.json ./packages/app/
# Install only production dependencies
RUN npm ci --only=production && \
    npm cache clean --force
# Copy built application and source files from builder
COPY --from=builder --chown=node:node /app/packages ./packages
COPY --from=builder --chown=node:node /app/node_modules ./node_modules
# Switch to existing non-root node user
USER node
# Expose ports for both frontend and backend
EXPOSE 3000 3001
# Health check for backend
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD node -e "require('http').get('http://localhost:3001/health', (res) => process.exit(res.statusCode === 200 ? 0 : 1))" || exit 1
# Run application using npm start
CMD ["npm", "start"]